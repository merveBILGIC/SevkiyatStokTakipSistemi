// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SevkiyatStokTakipSistemi.Data;

namespace SevkiyatStokTakipSistemi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210617090707_Yapilandir")]
    partial class Yapilandir
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Unvan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.AracBilgisi", b =>
                {
                    b.Property<int>("AracBilgisiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AracKapasitesi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AracPlakasi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AracTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AracBilgisiId");

                    b.ToTable("AracBilgileri");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.AracSurucusu", b =>
                {
                    b.Property<int>("SurucuId")
                        .HasColumnType("int");

                    b.Property<int>("AracBilgisiId")
                        .HasColumnType("int");

                    b.HasKey("SurucuId", "AracBilgisiId");

                    b.HasIndex("AracBilgisiId");

                    b.ToTable("AracSurucusu");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Firma", b =>
                {
                    b.Property<int>("FirmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CariIsim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmaAdresi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmaVergiDairesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirmaVergiNum")
                        .HasColumnType("int");

                    b.Property<string>("FirmaİlgiliKisi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MusteriKodu")
                        .HasColumnType("int");

                    b.Property<int>("Telnon")
                        .HasColumnType("int");

                    b.Property<int>("İlgiliKisiTel")
                        .HasColumnType("int");

                    b.HasKey("FirmaId");

                    b.ToTable("Firma");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Sevkiyat", b =>
                {
                    b.Property<int>("SevkiyatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DurumBildir")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SevkYuklemeyiyapanKisi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeslimAlcakKisi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeslimKisiTelNo")
                        .HasColumnType("int");

                    b.Property<string>("YuklemeYardimi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SevkiyatId");

                    b.ToTable("Sevkiyatlar");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SevkiyatAraci", b =>
                {
                    b.Property<int>("SevkiyatId")
                        .HasColumnType("int");

                    b.Property<int>("AracBilgisiId")
                        .HasColumnType("int");

                    b.HasKey("SevkiyatId", "AracBilgisiId");

                    b.HasIndex("AracBilgisiId");

                    b.ToTable("SevkiyatAraci");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SipFirma", b =>
                {
                    b.Property<int>("FirmaId")
                        .HasColumnType("int");

                    b.Property<int>("SiparisId")
                        .HasColumnType("int");

                    b.HasKey("FirmaId", "SiparisId");

                    b.HasIndex("SiparisId");

                    b.ToTable("FirmaSiparisleri");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SipSevkiyat", b =>
                {
                    b.Property<int>("SevkiyatId")
                        .HasColumnType("int");

                    b.Property<int>("SiparisId")
                        .HasColumnType("int");

                    b.HasKey("SevkiyatId", "SiparisId");

                    b.HasIndex("SiparisId");

                    b.ToTable("SipSevkiyat");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SipUrun", b =>
                {
                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.Property<int>("SiparisId")
                        .HasColumnType("int");

                    b.HasKey("UrunId", "SiparisId");

                    b.HasIndex("SiparisId");

                    b.ToTable("UrunSiparisler");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Siparis", b =>
                {
                    b.Property<int>("SiparisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Durum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SevkAdresi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiparisAcıklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SiparisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TeslimTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrunMiktari")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiparisId");

                    b.ToTable("Siparisler");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Stok", b =>
                {
                    b.Property<int>("StokId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StokAdedi")
                        .HasColumnType("int");

                    b.Property<int>("StokBirimi")
                        .HasColumnType("int");

                    b.Property<int>("UrunForeingKey")
                        .HasColumnType("int");

                    b.HasKey("StokId");

                    b.HasIndex("UrunForeingKey")
                        .IsUnique();

                    b.ToTable("Stoklar");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Surucu", b =>
                {
                    b.Property<int>("SurucuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telno")
                        .HasColumnType("int");

                    b.HasKey("SurucuId");

                    b.ToTable("Suruculer");
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Urun", b =>
                {
                    b.Property<int>("UrunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Resimyolu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrunBirimi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrunKodu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrunName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UrunId");

                    b.ToTable("Urun");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SevkiyatStokTakipSistemi.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.AracSurucusu", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.AracBilgisi", "AracBilgisi")
                        .WithMany()
                        .HasForeignKey("AracBilgisiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SevkiyatStokTakipSistemi.Models.Surucu", "Surucu")
                        .WithMany()
                        .HasForeignKey("SurucuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SevkiyatAraci", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.AracBilgisi", "AracBilgisi")
                        .WithMany()
                        .HasForeignKey("AracBilgisiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SevkiyatStokTakipSistemi.Models.Sevkiyat", "Sevkiyat")
                        .WithMany("SevkiyatAraclari")
                        .HasForeignKey("SevkiyatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SipFirma", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.Firma", "Firma")
                        .WithMany("FirmaSiparisleri")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SevkiyatStokTakipSistemi.Models.Siparis", "Siparis")
                        .WithMany("FirmaSiparisleri")
                        .HasForeignKey("SiparisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SipSevkiyat", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.Sevkiyat", "Sevkiyat")
                        .WithMany("SipSevkiyats")
                        .HasForeignKey("SevkiyatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SevkiyatStokTakipSistemi.Models.Siparis", "Siparis")
                        .WithMany("SipSevkiyats")
                        .HasForeignKey("SiparisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.SipUrun", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.Siparis", "Siparis")
                        .WithMany("UrunSiparisleri")
                        .HasForeignKey("SiparisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SevkiyatStokTakipSistemi.Models.Urun", "Urun")
                        .WithMany("UrunSiparisleri")
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SevkiyatStokTakipSistemi.Models.Stok", b =>
                {
                    b.HasOne("SevkiyatStokTakipSistemi.Models.Urun", "Urunler")
                        .WithOne("Stok")
                        .HasForeignKey("SevkiyatStokTakipSistemi.Models.Stok", "UrunForeingKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
